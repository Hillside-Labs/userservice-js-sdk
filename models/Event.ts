/* tslint:disable */
/* eslint-disable */
/**
 * User Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    specversion: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    time: Date;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    datacontenttype?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    dataschema?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    subject?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Event
     */
    data?: { [key: string]: any; };
}

/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "specversion" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "time" in value;

    return isInstance;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'specversion': json['specversion'],
        'type': json['type'],
        'source': json['source'],
        'id': json['id'],
        'time': (new Date(json['time'])),
        'datacontenttype': !exists(json, 'datacontenttype') ? undefined : json['datacontenttype'],
        'dataschema': !exists(json, 'dataschema') ? undefined : json['dataschema'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'data': !exists(json, 'data') ? undefined : json['data'],
    };
}

export function EventToJSON(value?: Event | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'specversion': value.specversion,
        'type': value.type,
        'source': value.source,
        'id': value.id,
        'time': (value.time.toISOString()),
        'datacontenttype': value.datacontenttype,
        'dataschema': value.dataschema,
        'subject': value.subject,
        'data': value.data,
    };
}

